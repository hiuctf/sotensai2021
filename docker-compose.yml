version: "3.5"

services:
  #ctfd:
  #  container_name: ctfd
  #  hostname: ctfd
  #  build: ./ctfd
  #  volumes:
  #    - ctfd_data:/CTFd/CTFd
  #    - ./CTFd/plugins:/usr/local/ctfd/CTFd/plugins
  #    - ./CTFd/themes:/usr/local/ctfd/CTFd/themes
  #  ports:
  #    - 8000:8000
  #  environment:
  #    TZ: "Asia/Tokyo"
  #  networks:
  #    - backend
    
  ssl:
    container_name: ssl_offloader
    hostname: haproxy
    build: ssl
    volumes:
      - ./ssl/config:/usr/local/etc/haproxy
      - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - backend
      - frontend
      - challenge
    ports:
      - 80:80
      - 443:443
    environment:
      CTFD_FQDN: ${CERT_FQDN}

  lets_encrypt:
    container_name: certbot
    hostname: certbot
    # on olacle arm vm 
    #image: certbot/certbot:arm64v8-latest
    #image: certbot/certbot
    build: lets_encrypt
    # 複数ドメインは非対応
    #entrypoint: /bin/sh entrypoint.sh
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - logs:/var/log
      #- web_content:/var/www/html
    # docker-compose run --service-ports lets_encrypt
    #ports:
    #  - "80:80"
    networks:
      - frontend
    environment:
      CERT_FQDN: ${CERT_FQDN}
      CERT_EMAIL: ${CERT_EMAIL}
      CERT_OPTION: ${CERT_OPTION}
      #CERTFILE_DIR: /etc/letsencrypt
    #depends_on:
      # ルーティング完了まで待ってくれない可能性があるのでssl側でシェルスクリプト必要かもしれない
    #  - ssl
  
  web-static:
    hostname: web-static
    image: nginx
    restart: always
    networks:
      - challenge
    volumes:
      - /var/www/html:/usr/share/nginx/html

#  sqli_db:
#    hostname: sqli
#    build: challenges/sqli/mysql
#    #command: --default-authentication-plugin=mysqlnative_password
#    restart: always
#    environment:
#      MYSQL_RANDOM_ROOT_PASSWORD: "true"
#      MYSQL_USER: sqli
#      MYSQL_PASSWORD: sqli
#    volumes:
#      - ./mysql/cnf/:/etc/mysql/conf.d/
#    networks:
#      - sqli_nw
#
#  php:
#    hostname: php
#    build: challenges/sqli/php
#    restart: always
#    volumes:
#      - /var/www/html:/var/www/html/
#    depends_on:
#      - sqli_db
#    networks:
#      - challenge
#      - sqli_nw

volumes:
  lets_encrypt:
    driver: local
  
  ctfd_data:
    driver: local

  logs:
    driver: local

  #web_content:
  #  driver: local

networks:
  backend:
    name: backend
    #internal: true

  frontend:
    name: frontend

  challenge:
    external:
      name: challenge
    #internal: true

#  sqli_nw:
#    name: sqli_nw
#    internal: true